Max connect 4 game: 

The task in this programming part is to implement an agent that plays the Max-Connect4 game using search. Figure 5 shows the first few moves of a game. The game is played on a 6x7 grid, with six rows and seven columns. There are two players, player A (red) and player B (green). The two players take turns placing pieces on the board: the red player can only place red pieces, and the green player can only place green pieces.

The program will runs in two modes: an interactive mode, that is best suited for the program playing against a human player, and a one-move mode, where the program reads the current state of the game from an input file, makes a single move, and writes the resulting state to an output file. The one-move mode can be used to make programs play against each other. Note that THE PROGRAM MAY BE EITHER THE RED OR THE GREEN PLAYER, THAT WILL BE SPECIFIED BY THE STATE, AS SAVED IN THE INPUT FILE.

It also measures and reports the time that your program takes, as a function of the number of moves it explores. All time measurements should report CPU time, not total time elapsed. CPU time does not depend on other users of the system, and thus is a meaningful measurement of the efficiency of the implementation.


Interactive Mode
In the interactive mode, the game should run from the command line with the following arguments (assuming a Java implementation, with obvious changes for C++ or other implementations):

java maxconnect4 interactive [input_file] [computer-next/human-next] [depth]

For example:
java maxconnect4 interactive input1.txt computer-next 7

Argument interactive specifies that the program runs in interactive mode.
Argument [input_file] specifies an input file that contains an initial board state. This way we can start the program from a non-empty board state. If the input file does not exist, the program should just create an empty board state and start again from there.
Argument [computer-first/human-first] specifies whether the computer should make the next move or the human.
Argument [depth] specifies the number of moves in advance that the computer should consider while searching for its next move. In other words, this argument specifies the depth of the search tree. Essentially, this argument will control the time takes for the computer to make a move.

After reading the input file, the program gets into the following loop:

    If computer-next, goto 2, else goto 5.
    Print the current board state and score. If the board is full, exit.
    Choose and make the next move.
    Save the current board state in a file called computer.txt (in same format as input file).
    Print the current board state and score. If the board is full, exit.
    Ask the human user to make a move (make sure that the move is valid, otherwise repeat request to the user).
    Save the current board state in a file called human.txt (in same format as input file).
    Goto 2.

One-Move Mode
The purpose of the one-move mode is to make it easy for programs to compete against each other, and communicate their moves to each other using text files. The one-move mode is invoked as follows:

java maxconnect4 one-move [input_file] [output_file] [depth]

For example:
java maxconnect4 one-move red_next.txt green_next.txt 5

In this case, the program simply makes a single move and terminates. In particular, the program should:

    Read the input file and initialize the board state and current score, as in interactive mode.
    Print the current board state and score. If the board is full, exit.
    Choose and make the next move.
    Print the current board state and score.
    Save the current board state to the output file IN EXACTLY THE SAME FORMAT THAT IS USED FOR INPUT FILES.
    Exit
    
RUNNING THE CODE:
1) Programming language: Python 2.4
2)Files:(a)maxconnect4.py- contains the implementation of MinMax algorithm with alpha beta pruning to increase the efficiency of the search along the tree.
        (b)MaxConnect4game.py- contains the basic functions for setting up the board, counting the score, print the board to files,calculating the utility value and evaluation function.
3)Functional model:
    (a)setInitState()- used to intialize the global variables
    (b)minimaxDecision()- used to implement the minmax algorithm for the min player and max player for a particular game, in this algorithm to avoid an infinite search tree/to limit the exectution time we set a maximum depth limit till which the algorithm can run to take a decision for the move.
    (c)maxVal() and minVal()-The max values calculates the best possible maximum value for the max player and calls the minVal() to obtain the least lowest value for the min player. At all the leaf nodes a utility value is returned which is considered to be the selection value for its parent node.
    (d)candidate()- checks the candidates for placing a move(acts as a fringe) holds the possible columns to make a move
    (e)main()- Implements the two modes; Interactive mode and One-move mode. Both the types further first check if the board is full, if yes a "Board is full" message is displayed. If not, the functions for the two modes call the minmaxDecision() to provide a move.
    (f)final_verdict()- This function is used to provide the  results of the game.
    (g)countScoreForEval()-Implemented to calculate the evaluation for the depth limit search.
4) Running the code:
For one-move game, type the following command to execute from the command prompt:
python maxconnect4.py one-move input_file_name output_file_name depth

For interactive game, type the following command to execute from the command prompt:
python maxconnect4.py interactive input_file_name [computer-next/human-next] depth

(*Note: The arguments are case sensitive*)



Refrences:
https://www.youtube.com/watch?v=zp3VMe0Jpf8
http://www.giocc.com/concise-implementation-of-minimax-through-higher-order-functions.html
https://roadtolarissa.com/connect-4-ai-how-it-works/

